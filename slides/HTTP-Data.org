* Sending Data with HTTP :slide:
  + GET :: Query arguments in URL
  + POST :: Data in request body
  + PUT :: Data in request body
** Arguments :notes:
   + Generally, the set of inputs to a function
   + Also called parameters
   + Functions take data in, return data out
   + HTTP calls can be conceptualized as functions (though just one metaphor)

* Query Arguments :slide:
  + ?name=Jim&title=i253
  + Typically used in GET requests
  + Key-Value pairs delimited by =, separated by &

* Key-Value pairs in Programming :slide:
  + Hash, Dictionary, HashMap, map
#+begin_src python
dictionary[key] = value
#+end_src
** Dictionary variable :notes:
   + one variable with many values inside
   + Dictionary: word to meaning
   + Map: Mathematical term for turning one set of values into another
   + Hash: CS method of storing a dictionary

* GET Review :slide:
  + What does GET do?
  + Should GET modify a resource?
  + How is data passed to GET?
** Answers :notes:
   + Request a representation of a resource
   + No
   + Query Arguments / Parameters

* GET Request :slide:
#+begin_src http
GET /home?name=World&title=Hello HTTP/1.1
Host: localhost
#+end_src

#+begin_src http
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 231
Server: Werkzeug/0.8.3 Python/2.7.3
Date: Fri, 21 Sep 2012 04:17:46 GMT

<!DOCTYPE html>
<html lang="en-us">
    <head>
        <meta charset="utf-8">
        <title>Hello</title>
        <link rel="stylesheet" href="static/css/default.css">
    </head>
    <body>
        <div class="container">
            Hello World
        </div>
    </body>
</html>
#+end_src
** Parts of Response :notes:
   + Headers
     + Key-Value pairs, separated by =:=
   + Then data

* =Content-Type= Header :slide:
  + Describes what format the data is in
  + MIME: Multipurpose Internet Mail Extensions
  + Internet Media Type, Content-Type
** Names :notes:
   + Usually referred to as MIME type, though acronym has Mail in it
   + Used throughout systems, from Internet to OS (what application to open)
   + So it can be referred to by other names

** Format :slide:
   + MIME :: /type/ / /subtype/ ; parameters
   + type :: the general category of data
   + subtype :: formats, encodings
   + parameters :: extra information that applies to that subtype
** Type / Subtype :notes:
   + type :: text, image, audio, video
   + subtype :: plain, png, mpeg, ogg
   + parameters :: charset, version number, ...

** Extensible :slide:
   + Common MIME types are registered
   + =text/plain= =image/png= =audio/mpeg=
   + Make up your own with =vnd.=, =prs.=
** Extensible X- :notes:
   + Formerly, =x-= was used for experimental types, but has been removed due to
     conflicts and difficulty in bringing to production
   + =vnd.= for vendors, =prs.= for personal, =x.= for backward compatibility
   + =application/x-www-form-urlencoded= started without getting registered,
     continued on
   + =X-= a common theme. You'll see it in Headers as well, but is now not good
     practice

* Pranks with =Content-Type= :slide:two_col:
[[file:img/wet.jpg]]
  + Install a proxy
  + Detect images
  + Make them wet
** Details :notes:
   + A proxy acts as a go-between for clients (eg. in an office) and servers
   + Proxy can modify a request or response
   + Image manipulation libraries can alter images

** Flip Images :slide:
[[file:img/flip_image screenshot.png]]
** Free WiFi revenge :notes:
   + Noticed someone using wifi
   + Installed proxy to flip all the images
   + http://www.ex-parrot.com/pete/upside-down-ternet.html

* POST & PUT Data :slide:
  + Requests have metadata (Headers)
  + Requests can have data, too
  + Data is formated similarly to query arguments

** POST & PUT Data :slide:
#+begin_src http
PUT /wiki HTTP/1.1
Host: localhost
Content-Length: 21
Content-Type: application/x-www-form-urlencoded

url=http://disney.com
#+end_src

#+begin_src http
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 32
Server: Werkzeug/0.8.3 Python/2.7.3
Date: Fri, 21 Sep 2012 04:24:43 GMT

Stored wiki => http://disney.com
#+end_src
** Elements :notes:
   + Still using Host header
   + Content-Length: number of bytes in the data section
   + Content-Type: How the content is formated
   + =application/x-www-form-urlencoded= means encoded like GET query arguments

* POST in practice :slide:
  + Some browsers only support =GET=, =POST=
  + HTML5 (currently) only supports =GET=, =POST=
  + So resource accessed by browsers, use =POST= for all modifying interactions
** Changing :notes:
   + AJAX requests generally work with all methods
   + Can "tunnel" requests by using a hidden field, \_method="DELETE"
   + Keep up with standard
   + https://www.w3.org/Bugs/Public/show_bug.cgi?id=10671
   + For APIs, use appropriate methods

* Query Arguments :slide:
  + Delimited by =, separated by =&=
  + What happens if you want to send a =?=
  + What happens if you want to send a =&=?
  + Just like HTML we need to *encode* the data

** Encoding :slide:
  + Map one representation of data to another
  + Map normal text to a format accepted by HTTP query params
  + Map special characters to the hexidecimal representation

** URL Encoding  :slide:
   + = :: =%3D=
   + & :: =%26=
   + space :: =%20=
** Tips :notes:
   + [[http://www.asciitable.com/][ASCII to hex]]
   + [[http://meyerweb.com/eric/tools/dencoder/][URL Decoder/Encoder]]

** HTML Encoding  :slide:
   + < :: =&lt;=
   + & :: =&amp;=
   + > :: =&gt;=
   + â˜ƒ :: =&#9731;=
** Tips :notes:
   + You can encode any character with decimal or hex encoding
   + http://www.w3.org/International/questions/qa-escapes

* Encoding Schemes  :slide:
#+begin_src html
GET /home?name=Jim%20%26%20Jenny&title=Awesome HTTP/1.1
Host: localhost
#+end_src

#+begin_src html
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 243
Server: Werkzeug/0.8.3 Python/2.7.3
Date: Fri, 21 Sep 2012 04:36:18 GMT

<!DOCTYPE html>
<html lang="en-us">
    <head>
        <meta charset="utf-8">
        <title>Awesome</title>
        <link rel="stylesheet" href="static/css/default.css">
    </head>
    <body>
        <div class="container">
            Hello Jim &amp; Jenny
        </div>
    </body>
</html>
#+end_src
** HTTP Encoding => HTML Encoding :notes:
   + Note how ampersand has two representations depending on encoding scheme!

* POST & PUT Data :slide:
#+begin_src http
POST /wiki HTTP/1.1
Host: localhost
Content-Length: 21
Content-Type: application/x-www-form-urlencoded

url=http://disney.com
#+end_src

#+begin_src http
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 32
Server: Werkzeug/0.8.3 Python/2.7.3
Date: Fri, 21 Sep 2012 04:24:43 GMT

Stored wiki => http://disney.com
#+end_src
** More :notes:
   + What do I change to add an extra parameter to this PUT request?
     + =Content-Length= and append =&key=value=


* Review =Content-Type= :slide:
  + Request header used to describe data being sent
  + Response header used to describe data in return
  + Required in many situations for understanding
** Homework :notes:
   + In the homework, remember to set the =Content-Type=


#+STYLE: <link rel="stylesheet" type="text/css" href="production/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/color-blue.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/presenter.css" media="presenter" />
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Lobster+Two:700|Yanone+Kaffeesatz:700|Open+Sans' rel='stylesheet' type='text/css'>

#+BEGIN_HTML
<script type="text/javascript" src="production/org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
